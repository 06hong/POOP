{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c03bea5c-0fa7-4487-a094-97e228088bdd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My dog name is Harry and age 6\n"
     ]
    }
   ],
   "source": [
    "#use class for thousand dogs for usablity etc name age \n",
    "#many other attribute \n",
    "# if no class u gotta make some many variable and thats annoying\n",
    "#breed, size etc holy moly\n",
    "#tedious\n",
    "#how about making a class?\n",
    "#save their attributes and make copies\n",
    "\n",
    "\n",
    "#pretend i dont have a class\n",
    "\n",
    "#dog1name = \"Bob\"\n",
    "#dog1age = 6\n",
    "#dog1color = 'red'\n",
    "\n",
    "#dog2name = \"Carl\"\n",
    "#dog2age = 7\n",
    "#dog2color = 'blue'\n",
    "\n",
    "#so tedious!!!!\n",
    "\n",
    "\n",
    "#how about a structure?\n",
    "\n",
    "\n",
    "#too annoying to make a sentence even\n",
    "\n",
    "class dog():\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "#class of things, share methods(functions) \n",
    "\n",
    "#etc: walk my dogs, there is a method attribute to it\n",
    "\n",
    "#etc:reusable functions\n",
    "\n",
    "#etc: what if rename my dogs for the same functions, only need to write once\n",
    "\n",
    "#the class template can help save these attributes\n",
    "\n",
    "#every class has inti fuunction, even if you don't write it, it just don't write anything\n",
    "\n",
    "#init is automatically called __init__ these are called \"special methods\"\n",
    "\n",
    "#the underscore means thunder methods\n",
    "\n",
    "#__init__ is like a piece of paper than stores all that crap,function that runs when you intiitaete it\n",
    " \n",
    "#self is like a storage for your class\n",
    "\n",
    "#after self are parameters\n",
    "\n",
    "    def __init__(self, name, age):\n",
    "        self.name=name\n",
    "        self.age= age\n",
    "    \n",
    "#store it like that or the vet will forget\n",
    "\n",
    "\n",
    "#instancing an object, aka harry\n",
    "\n",
    "#harry=dog('harry',6)\n",
    "\n",
    "#now this is stored\n",
    "\n",
    "#harry\n",
    "\n",
    "#bob= dog('bob',2)\n",
    "\n",
    "#bob is stored\n",
    "\n",
    "#bob\n",
    "\n",
    "#how to access this information?\n",
    "\n",
    "#harry.age\n",
    "\n",
    "#type in object.variable\n",
    "\n",
    "#wait harry is actually 10 years old?\n",
    "\n",
    "#harry.age= 10\n",
    "\n",
    "#this is how you change attribute\n",
    "\n",
    "#harry.age <-- now age is changed\n",
    "\n",
    "\n",
    "#is is one way of using init\n",
    "\n",
    "#init runs many times, it immdiently calls function right after, ###ONLY ONCE\n",
    "\n",
    "#call other methods using a dot\n",
    "\n",
    "    def method1(self):\n",
    "        \n",
    "        print(f'My dog name is {self.name.title()} and age {self.age}')\n",
    "        \n",
    "harry=dog('harry',6)        \n",
    "\n",
    "harry.method1()\n",
    "\n",
    "#concept of classes are important because ##there are 2 ways in programming\n",
    "# 1 way is using CLASS\n",
    "# another way is FUNCTIONAL progamming\n",
    "\n",
    "#many langauges are class base programming\n",
    "#java or c++ is a class\n",
    "\n",
    "\n",
    "#class Car():\n",
    "    #wheels = 4 #all my cars have 4 wheels uncesscary to keep changing \n",
    "    #whats the point of keep on passing on init?\n",
    "   \n",
    "    #color = 'blue'\n",
    "    \n",
    "    \n",
    "# if you do it like that, wheels is always going to be 4, color always blue\n",
    "#default\n",
    "\n",
    "#but init allows you to SET it, only ONCE'\n",
    "\n",
    "\n",
    "\n",
    "m,;\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43b9ad14-3a7e-4479-936b-7341c00876fd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
