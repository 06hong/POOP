{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "32a166e0-272a-494e-a762-1a9a6a362c01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "honggao@gmail.com\n",
      "hdfco@gmail.com\n"
     ]
    }
   ],
   "source": [
    "#class allow to regroup functions(atrributes and methods)\n",
    "#blueprint for creating instances\n",
    "class Employee:\n",
    "    pass\n",
    "\n",
    "\n",
    "\n",
    "emp_1= Employee()\n",
    "emp_2= Employee()\n",
    "\n",
    "emp_1.first = 'Hong'\n",
    "emp_1.last = 'Gao'\n",
    "emp_1.email = 'honggao@gmail.com'\n",
    "emp_1.pay = 5000\n",
    "\n",
    "emp_2.first = 'Lo'\n",
    "emp_2.last = 'Man'\n",
    "emp_2.email = 'hdfco@gmail.com'\n",
    "emp_2.pay = 5000\n",
    "\n",
    "print(emp_1.email)\n",
    "print(emp_2.email)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9b1fc426-f0a7-4382-b6e1-1d8ddbefc547",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hong.Gao@company.com\n",
      "Lo.Man@company.com\n",
      "Hong Gao\n",
      "Lo Man\n",
      "Hong Gao\n"
     ]
    }
   ],
   "source": [
    "#to not do manually\n",
    "class Employee:\n",
    "    def __init__(self, first, last, pay): #attributes of our class\n",
    "        self.first = first #done automatically now\n",
    "        self.last = last\n",
    "        self.pay = pay\n",
    "        self.email = first + '.' + last + '@company.com'\n",
    "        \n",
    "    #method call fullname, pass arguement(self)\n",
    "    def fullname(self):\n",
    "        return \"{} {}\".format(self.first, self.last)\n",
    "        \n",
    "emp_1= Employee('Hong', 'Gao', 5000) \n",
    "emp_2= Employee('Lo','Man',5000)\n",
    "\n",
    "\n",
    "print(emp_1.email)\n",
    "print(emp_2.email)\n",
    "\n",
    "print(emp_1.fullname())\n",
    "print(emp_2.fullname())\n",
    "\n",
    "#another way to call\n",
    "print(Employee.fullname(emp_1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e40f4017-97d8-4b00-a04d-ae5643ab8f1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50000\n",
      "52000\n"
     ]
    }
   ],
   "source": [
    "class Employee:\n",
    "    def __init__(self, first, last, pay): #attributes of our class\n",
    "        self.first = first #done automatically now\n",
    "        self.last = last\n",
    "        self.pay = pay\n",
    "        self.email = first + '.' + last + '@company.com'\n",
    "        \n",
    "    #method call fullname, pass arguement(self)\n",
    "    def fullname(self):\n",
    "        return \"{} {}\".format(self.first, self.last)\n",
    "    \n",
    "    def apply_raise(self):\n",
    "        self.pay = int(self.pay * 1.04)\n",
    "        \n",
    "emp_1= Employee('Hong', 'Gao', 50000) \n",
    "emp_2= Employee('Lo','Man',50000)\n",
    "\n",
    "\n",
    "print(emp_1.pay)\n",
    "emp_1.apply_raise()\n",
    "print(emp_1.pay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "290c6d28-c444-4e97-b5af-e95bf274ceff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50000\n",
      "52000\n"
     ]
    }
   ],
   "source": [
    "#to use class variable\n",
    "\n",
    "class Employee:\n",
    "    \n",
    "    raise_amount = 1.04\n",
    "    \n",
    "    def __init__(self, first, last, pay): #attributes of our class\n",
    "        self.first = first #done automatically now\n",
    "        self.last = last\n",
    "        self.pay = pay\n",
    "        self.email = first + '.' + last + '@company.com'\n",
    "        \n",
    "    #method call fullname, pass arguement(self)\n",
    "    def fullname(self):\n",
    "        return \"{} {}\".format(self.first, self.last)\n",
    "    \n",
    "    def apply_raise(self):\n",
    "        self.pay = int(self.pay * Employee.raise_amount) #or self.raise_amount\n",
    "        \n",
    "emp_1= Employee('Hong', 'Gao', 50000) \n",
    "emp_2= Employee('Lo','Man',50000)\n",
    "\n",
    "\n",
    "print(emp_1.pay)\n",
    "emp_1.apply_raise()\n",
    "print(emp_1.pay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6c27dcff-fc6e-45a0-8e38-40d71ab5e13d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'first': 'Hong', 'last': 'Gao', 'pay': 50000, 'email': 'Hong.Gao@company.com', 'raise_amount': 1.0588}\n",
      "{'first': 'Lo', 'last': 'Man', 'pay': 50000, 'email': 'Lo.Man@company.com'}\n",
      "1.04\n",
      "1.0588\n",
      "1.04\n"
     ]
    }
   ],
   "source": [
    "#to use class variable\n",
    "\n",
    "class Employee:\n",
    "    \n",
    "    raise_amount = 1.04\n",
    "    \n",
    "    def __init__(self, first, last, pay): #attributes of our class\n",
    "        self.first = first #done automatically now\n",
    "        self.last = last\n",
    "        self.pay = pay\n",
    "        self.email = first + '.' + last + '@company.com'\n",
    "        \n",
    "    #method call fullname, pass arguement(self)\n",
    "    def fullname(self):\n",
    "        return \"{} {}\".format(self.first, self.last)\n",
    "    \n",
    "    def apply_raise(self):\n",
    "        self.pay = int(self.pay * Employee.raise_amount) #or self.raise_amount\n",
    "        \n",
    "emp_1= Employee('Hong', 'Gao', 50000) \n",
    "emp_2= Employee('Lo','Man',50000)\n",
    "\n",
    "emp_1.raise_amount = 1.0588 #update\n",
    "\n",
    "print(emp_1.__dict__) #look here\n",
    "print(emp_2.__dict__) #look here\n",
    "\n",
    "print(Employee.raise_amount)\n",
    "print(emp_1.raise_amount)\n",
    "print(emp_2.raise_amount)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "37a041e8-4403-4875-9c65-60000002d048",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "#count # of employee\n",
    "class Employee:\n",
    "    \n",
    "    num_of_emps = 0 #look here\n",
    "    raise_amount = 1.04\n",
    "    \n",
    "    def __init__(self, first, last, pay): #attributes of our class\n",
    "        self.first = first #done automatically now\n",
    "        self.last = last\n",
    "        self.pay = pay\n",
    "        self.email = first + '.' + last + '@company.com'\n",
    "        \n",
    "        Employee.num_of_emps += 1\n",
    "        \n",
    "    #method call fullname, pass arguement(self)\n",
    "    def fullname(self):\n",
    "        return \"{} {}\".format(self.first, self.last)\n",
    "    \n",
    "    def apply_raise(self):\n",
    "        self.pay = int(self.pay * Employee.raise_amount) #or self.raise_amount\n",
    "        \n",
    "emp_1= Employee('Hong', 'Gao', 50000) \n",
    "emp_2= Employee('Lo','Man',50000)\n",
    "\n",
    "print(Employee.num_of_emps)#look here\n",
    "\n",
    "#INSTANCE VARIABLES = EMP_1 EMP_1\n",
    "#CLASS VARIABLES =EMPLOYEE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1970ab36-34f5-4824-8a08-aa09badc0612",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-25-277d2d3964e6>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-25-277d2d3964e6>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    Class variables are variables that we set inside a class, and are shared among all instances. Corey gave a good example where the number of total employs should be the same to every employ, no matter which employee we are referring to. Therefore,\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Class variables are variables that we set inside a class, and are shared among all instances. Corey gave a good example where the number of total employs should be the same to every employ, no matter which employee we are referring to. Therefore,\n",
    "\n",
    "\n",
    "emp_1.num_of_employ = emp_2.num_of_employ = Employee.num_of_employ\n",
    "\n",
    "\n",
    "Instance variables are variables that are different from each instance. For example, the names and the pay for each employee. They have to be different.\n",
    "\n",
    "\n",
    "Corey also shows that class variables and instance variables are closely related, and that class variables are kind of 'inherited' to the 'self' variables. To illustrate this, Corey shows an example of 'annual raise of pay'. He initially creates the class variable to show a case where annual raise is equal among all the employees. This variable of 1.04 was accessible through each instance, and also through the class itself(obiviously). That is,\n",
    "print(Employee.annual_raise)\n",
    "print(emp_1.annual_raise)\n",
    "print(emp_2.anual_rais)\n",
    "all printed out 1.04.\n",
    "\n",
    "\n",
    "However, using the ._dict__  thing, Corey shows that the intances, emp_1 and emp_2 does not contain the annual_raise value. Corey explains that if a variable is not found within an instance and programmers try to access the variable, python automatically looks in in the variable of the instance's class, and then the more classes that the instance's class inherits from."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "304c4bc2-25ba-4025-aaff-5031b78aaae5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.05\n",
      "1.05\n",
      "1.05\n",
      "John.Doe@company.com\n",
      "7000\n"
     ]
    }
   ],
   "source": [
    "#classmethods\n",
    "class Employee:\n",
    "    \n",
    "    num_of_emps = 0 #look here\n",
    "    raise_amount = 1.04\n",
    "    \n",
    "    def __init__(self, first, last, pay): #attributes of our class\n",
    "        self.first = first #done automatically now\n",
    "        self.last = last\n",
    "        self.pay = pay\n",
    "        self.email = first + '.' + last + '@company.com'\n",
    "        \n",
    "        Employee.num_of_emps += 1\n",
    "        \n",
    "    #method call fullname, pass arguement(self)\n",
    "    def fullname(self):\n",
    "        return \"{} {}\".format(self.first, self.last)\n",
    "    \n",
    "    def apply_raise(self):\n",
    "        self.pay = int(self.pay * Employee.raise_amount) #or self.raise_amount\n",
    "   \n",
    "    #hereherhereherherehrehr\n",
    "    @classmethod\n",
    "    def set_raise_amt(cls, amount):\n",
    "        cls.raise_amt = amount\n",
    "    \n",
    "    #herherherehehehehrehrehe    \n",
    "    @classmethod\n",
    "    def from_string(cls, emp_str):\n",
    "        first, last, pay = emp_str.split('-')\n",
    "        return cls(first, last, pay)\n",
    "        \n",
    "emp_1= Employee('Hong', 'Gao', 50000) \n",
    "emp_2= Employee('Lo','Man',50000)\n",
    "\n",
    "emp_2.set_raise_amt(1.05)#use class method\n",
    "Employee.set_raise_amt(1.05)#usually use this, doesn't make sense to use above\n",
    "\n",
    "print(Employee.raise_amt)\n",
    "print(emp_1.raise_amt)\n",
    "print(emp_2.raise_amt)\n",
    "\n",
    "emp_str_1 = 'John-Doe-7000'\n",
    "emp_str_2 = 'Steve-Smith-3000'\n",
    "emp_str_3 = 'Jane-Doe-90000'\n",
    "\n",
    "new_emp_1 = Employee.from_string(emp_str_1) #look at from_string\n",
    "\n",
    "print(new_emp_1.email)\n",
    "print(new_emp_1.pay)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "652bdef3-abe8-47f6-9316-52a1bbc92456",
   "metadata": {},
   "outputs": [],
   "source": [
    "@classmethod\n",
    "def fromtimestamp(cls, t):\n",
    "    y, m, d, hh, mm, ss, weekday, jday, dst = _time.localtime(t)\n",
    "    return cls(y, m, d)\n",
    "                                                              \n",
    "                                                              \n",
    "                                                             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f812431a-174e-403a-96e9-9832cfb96c5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "#staticmethods, don't pass anything automatically\n",
    "\n",
    "class Employee:\n",
    "    \n",
    "    num_of_emps = 0 #look here\n",
    "    raise_amount = 1.04\n",
    "    \n",
    "    def __init__(self, first, last, pay): #attributes of our class\n",
    "        self.first = first #done automatically now\n",
    "        self.last = last\n",
    "        self.pay = pay\n",
    "        self.email = first + '.' + last + '@company.com'\n",
    "        \n",
    "\n",
    "    @classmethod\n",
    "    def set_raise_amt(cls, amount):\n",
    "        cls.raise_amt = amount\n",
    "    \n",
    "      \n",
    "    @classmethod\n",
    "    def from_string(cls, emp_str):\n",
    "        first, last, pay = emp_str.split('-')\n",
    "        return cls(first, last, pay)\n",
    "    \n",
    "    #over here\n",
    "    @staticmethod #if you don't access instance or class anywhere within the function\n",
    "    def is_workday(day):\n",
    "        if day.weekday() == 5 or day.weekday() == 6:\n",
    "            return False\n",
    "        return True\n",
    "        \n",
    "        \n",
    "emp_1= Employee('Hong', 'Gao', 50000) \n",
    "emp_2= Employee('Lo','Man', 50000)\n",
    "\n",
    "import datetime\n",
    "\n",
    "my_date = datetime.date(2016, 7, 10)\n",
    "\n",
    "print(Employee.is_workday(my_date))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5f53237-d213-44f7-aa5f-6286c329f4a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "Firstly, a regular method is the type of method that we are used to seeing since the start of OOP tutorials. It is accessible through both the class and the instance, which means that we can call for the method in both\n",
    "Employee.method()\n",
    "and\n",
    "emp_1.method()\n",
    "they automatically have the instance as the first positional argument, as self.\n",
    "\n",
    "\n",
    "Secondly, class methods are the type of method used when a method is not really about an instance of a class, but the class itself. To create a class method, just add '@classmethod' a line before creating the class method. The class is automatically the first argument to be passed in, and is represented as 'cls' instead of 'class'. This is because 'class' is already assigned to be something else in Python. There are 2 ways of using the class method as far as Corey has shown.\n",
    "\n",
    "\n",
    "First is modifying the class variable. Corey modified the 'raise_amount' class variable using a class method. Just remember that to access a class variable, we have to write 'cls.' before specifying the actual name. For example, as 'cls.raise_amount' as in the video.\n",
    "\n",
    "\n",
    "Second is making an alternative constructor. Sometimes people have information of their specific instances of the class available in a specific format. Corey shows an example of this where first and last names and pay are separated by a hyphen. Corey creates a class method that returns the class with the specific values passed in that are obtained by using split() method to the string passed in. User of the script can now automatically create a new instance without having to parse the string at '-'.\n",
    "\n",
    "\n",
    "Corey then moves on to cover static methods. Static methods are different from regular methods an class methods in that it doesn't have a class or instance that is automatically passed in as a firs positional argument. They can be created by adding '@staticmethod' a line before defining the method. These are methods that have a logical connection to the Class, but does not need a class or instance as an argument. Corey says that it is better to make sure we create a static method rather then class or regular method when we are sure that we don't make use of the class or instance within the method.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
